"monitor_review_list","monitor_review")) {
path.1<-"/crf_metadata/latest/monitor_review_list.csv"
path.2<-"/monitor?output_format=csv"
} else if (data %in% c("lock","form_lock_list.csv",
"form_lock_list","form_lock")) {
path.1<-"/crf_metadata/latest/form_lock_list.csv"
path.2<-"/lock?output_format=csv"
#Event APIs
} else if (data %in% c("events","event_list.csv","event_list")){
path.1<-"/study_data/latest/event_list.csv"
path.2<-"/events?output_format=csv"
} else if (data %in% c("attribute_mng/event/list","event_attribute_datadic.csv",
"event_attribute_datadic","event_attr_dd")) {
path.1<-"/study_data/latest/event_attribute_datadic.csv"
path.2<-"/attribute_mng/event/list?output_format=csv"
} else if (data %in% c("tracks","schedule_of_events_list.csv","schedule_of_events_list","soes")){
path.1<-"/study_data/latest/schedule_of_events_list.csv"
path.2<-"/tracks?output_format=csv"
} else if (data %in% c("subject/track/list","subject_track_list.csv","subject_track_list","subject_track")){
path.1<-"/study_data/latest/subject_track_list.csv"
path.2<-"/subject/track/list?output_format=csv"
} else {#if datalake=T and pathway not hardcoded above, check if data parameter matches a datalake file
data<-gsub('.csv','',data,fixed=T)
files.list<-atri_api(protocol,path=paste0('/docs/s3_archive/data_lake/items/edc/study_data/latest/?format=json&q=',utils::URLencode(data)))
files.list<-files.list[grepl(paste0(data,".csv"),files.list$label,fixed=T),]
if (nrow(files.list)==1 & datalake==T){
path.1<-paste0("/docs/s3_archive/data_lake/download/",files.list$label)
} else {
stop(paste0(data," pathway not set up for this function. See documentation for atri_api function to obtain data source."))}
}
if (datalake) {
temp<-tempfile()
resp<-atri_api(protocol, path=paste0("/docs/s3_archive/data_lake/download/edc",
path.1), direct=FALSE, file = temp)
dd<-read.csv(paste0(temp,".csv"))
} else {
dd<-atri_api(protocol,path=path.2,direct=FALSE)
}
}
protocol<-'a345'
atri_study_data(protocol,'subjects')
atri_study_data(protocol,'subjects')
temp
temp<-tempfile()
atri_study_data <- function(protocol, data, datalake=TRUE) {
data<-tolower(data)
#Subject APIs
if (data %in% c("subjects","participant_list.csv","participant_list")){
path.1<-"/study_data/latest/participant_list.csv"
path.2<-"/subjects?output_format=csv"
} else if (data %in% c("subjects/attribute_values","subject_attribute_value_list.csv",
"subject_attribute_value_list","subject_attr")) {
path.1<-"/study_data/latest/subject_attribute_value_list.csv"
path.2<-"/subjects/attribute_values?output_format=csv"
} else if (data %in% c("/attribute_mng/subject/list","subject_attribute_datadic.csv",
"subject_attribute_datadic.csv","subject_attr_dd")) {
path.1<-"/study_data/latest/subject_attribute_datadic.csv"
path.2<-"/attribute_mng/subject/list?output_format=csv"
#Site APIs
} else if (data %in% c("sites","site_list.csv","site_list")){
path.1<-"/study_data/latest/site_list.csv"
path.2<-"/sites?output_format=csv"
} else if (data %in% c("site/attribute_values","site_attribute_value_list.csv",
"site_attribute_value_list","site_attr")) {
path.1<-"/study_data/latest/site_attribute_value_list.csv"
path.2<-"/site/attribute_values?output_format=csv"
} else if (data %in% c("/attribute_mng/site/list","site_attribute_datadic.csv",
"site_attribute_datadic","site_attr_dd")) {
path.1<-"/study_data/latest/site_attribute_datadic.csv"
path.2<-"/attribute_mng/site/list?output_format=csv"
#Study APIs
} else if (data %in% c("/attribute_mng/study/list","study_attribute_datadic.csv",
"study_attribute_datadic","study_attr_dd")) {
path.1<-"/study_data/latest/study_attribute_datadic.csv"
path.2<-"/attribute_mng/study/list?output_format=csv"
#CRF APIs
} else if (data %in% c("crfs","ecrf_list.csv","ecrf_list")){
path.1<-"/study_data/latest/ecrf_list.csv"
path.2<-"/crfs?output_format=csv"
} else if (data %in% c("monitor","monitor_review_list.csv",
"monitor_review_list","monitor_review")) {
path.1<-"/crf_metadata/latest/monitor_review_list.csv"
path.2<-"/monitor?output_format=csv"
} else if (data %in% c("lock","form_lock_list.csv",
"form_lock_list","form_lock")) {
path.1<-"/crf_metadata/latest/form_lock_list.csv"
path.2<-"/lock?output_format=csv"
#Event APIs
} else if (data %in% c("events","event_list.csv","event_list")){
path.1<-"/study_data/latest/event_list.csv"
path.2<-"/events?output_format=csv"
} else if (data %in% c("attribute_mng/event/list","event_attribute_datadic.csv",
"event_attribute_datadic","event_attr_dd")) {
path.1<-"/study_data/latest/event_attribute_datadic.csv"
path.2<-"/attribute_mng/event/list?output_format=csv"
} else if (data %in% c("tracks","schedule_of_events_list.csv","schedule_of_events_list","soes")){
path.1<-"/study_data/latest/schedule_of_events_list.csv"
path.2<-"/tracks?output_format=csv"
} else if (data %in% c("subject/track/list","subject_track_list.csv","subject_track_list","subject_track")){
path.1<-"/study_data/latest/subject_track_list.csv"
path.2<-"/subject/track/list?output_format=csv"
} else {#if datalake=T and pathway not hardcoded above, check if data parameter matches a datalake file
data<-gsub('.csv','',data,fixed=T)
files.list<-atri_api(protocol,path=paste0('/docs/s3_archive/data_lake/items/edc/study_data/latest/?format=json&q=',utils::URLencode(data)))
files.list<-files.list[grepl(paste0(data,".csv"),files.list$label,fixed=T),]
if (nrow(files.list)==1 & datalake==T){
path.1<-paste0("/docs/s3_archive/data_lake/download/",files.list$label)
} else {
stop(paste0(data," pathway not set up for this function. See documentation for atri_api function to obtain data source."))}
}
if (datalake) {
temp<-tempfile()
resp<-atri_api(protocol, path=paste0("/docs/s3_archive/data_lake/download/edc",
path.1), direct=FALSE, file = paste0(temp,".csv"))
dd<-read.csv(paste0(temp,".csv"))
} else {
dd<-atri_api(protocol,path=path.2,direct=FALSE)
}
}
atri_study_data(protocol,'subjects')
test<-atri_study_data(protocol,'subjects')
atri_study_data(protocol,'subjects')
test2<-atri_study_data(protocol,'subjects',datalake=F)
test2<-atri_study_data(protocol,'test',datalake=F)
#' Read ATRI study data
#'
#' @param protocol The protocol name (e.g. 'a345-test-1').
#' @param data The data source name (e.g. 'subjects').
#' @param datalake default is TRUE, which returns data from the latest data extract from the data lake s3 archive topic.
#' With datalake=FALSE, returns the current data using the public API (/public/api/v1/crfs/data/<crf>).
#' @param wide default is TRUE, which returns data with one record per row (one column per field). With wide=FALSE,
#' returns data in the raw, long format (one row per field).
#' @param translated default is TRUE, which returns translated data. Only applicable if wide=TRUE
#' @return A data.frame of the crf data.
#'
#' @seealso \code{\link{atri_api}}
#' @examples
#' \donttest{
#'    registry_wide <- atri_crf("a345-test-1", "registry")
#'    registry_long <- atri_crf("a345-test-1", "registry",wide=F)
#'    registry_untranslated <- atri_crf("a345-test-1", "registry",translated=F)
#'    registry_live <- atri_crf("a345-test-1", "registry",datalake=F)
#' }
#' @importFrom magrittr "%>%"
#' @export
atri_study_data <- function(protocol, data, datalake=TRUE) {
data<-tolower(data)
#Subject APIs
if (data %in% c("subjects","participant_list.csv","participant_list","Participant List")){
dl_api<-"/study_data/latest/participant_list.csv"
pub_api<-"/subjects?output_format=csv"
} else if (data %in% c("subjects/attribute_values","subject_attribute_value_list.csv",
"subject_attribute_value_list","subject_attr","Participant Attribute Value List")) {
dl_api<-"/study_data/latest/subject_attribute_value_list.csv"
pub_api<-"/subjects/attribute_values?output_format=csv"
} else if (data %in% c("/attribute_mng/subject/list","subject_attribute_datadic.csv",
"subject_attribute_datadic.csv","subject_attr_dd","Participant Attribute Datadic List")) {
dl_api<-"/study_data/latest/subject_attribute_datadic.csv"
pub_api<-"/attribute_mng/subject/list?output_format=csv"
#Site APIs
} else if (data %in% c("sites","site_list.csv","site_list","Site List")){
dl_api<-"/study_data/latest/site_list.csv"
pub_api<-"/sites?output_format=csv"
} else if (data %in% c("site/attribute_values","site_attribute_value_list.csv",
"site_attribute_value_list","site_attr","Site Attribute Value List")) {
dl_api<-"/study_data/latest/site_attribute_value_list.csv"
pub_api<-"/site/attribute_values?output_format=csv"
} else if (data %in% c("/attribute_mng/site/list","site_attribute_datadic.csv",
"site_attribute_datadic","site_attr_dd","Site Attribute Datadic List")) {
dl_api<-"/study_data/latest/site_attribute_datadic.csv"
pub_api<-"/attribute_mng/site/list?output_format=csv"
#Study APIs
} else if (data %in% c("/attribute_mng/study/list","study_attribute_datadic.csv",
"study_attribute_datadic","study_attr_dd","Study Attribute Datadic List")) {
dl_api<-"/study_data/latest/study_attribute_datadic.csv"
pub_api<-"/attribute_mng/study/list?output_format=csv"
#CRF APIs
} else if (data %in% c("crfs","ecrf_list.csv","ecrf_list","eCRF List")){
dl_api<-"/study_data/latest/ecrf_list.csv"
pub_api<-"/crfs?output_format=csv"
} else if (data %in% c("monitor","monitor_review_list.csv",
"monitor_review_list","monitor_review","Monitor Review List")) {
dl_api<-"/crf_metadata/latest/monitor_review_list.csv"
pub_api<-"/monitor?output_format=csv"
} else if (data %in% c("lock","form_lock_list.csv",
"form_lock_list","form_lock","Form Lock List")) {
dl_api<-"/crf_metadata/latest/form_lock_list.csv"
pub_api<-"/lock?output_format=csv"
#Event APIs
} else if (data %in% c("events","event_list.csv","event_list","Event List")){
dl_api<-"/study_data/latest/event_list.csv"
pub_api<-"/events?output_format=csv"
} else if (data %in% c("attribute_mng/event/list","event_attribute_datadic.csv",
"event_attribute_datadic","event_attr_dd","Event Attribute Datadic List")) {
dl_api<-"/study_data/latest/event_attribute_datadic.csv"
pub_api<-"/attribute_mng/event/list?output_format=csv"
} else if (data %in% c("tracks","schedule_of_events_list.csv",
"schedule_of_events_list","soes","Schedule of Events")){
dl_api<-"/study_data/latest/schedule_of_events_list.csv"
pub_api<-"/tracks?output_format=csv"
} else if (data %in% c("subject/track/list","subject_track_list.csv",
"subject_track_list","subject_track","Subject Track List")){
dl_api<-"/study_data/latest/subject_track_list.csv"
pub_api<-"/subject/track/list?output_format=csv"
} else {#if datalake=T and pathway not hardcoded above, check if data parameter matches a datalake file
data<-gsub('.csv','',data,fixed=T)
files.list<-atri_api(protocol,path=paste0('/docs/s3_archive/data_lake/items/edc/study_data/latest/?format=json&q=',utils::URLencode(data)))
files.list<-files.list[grepl(paste0(data,".csv"),files.list$label,fixed=T),]
if (nrow(files.list)==1 & datalake==T){
dl_api<-paste0("/docs/s3_archive/data_lake/download/",files.list$label)
} else {
stop(paste0(data," pathway not set up. Check documentation or use atri_api function to obtain data source."))}
}
if (datalake) {
temp<-tempfile()
resp<-atri_api(protocol, path=paste0("/docs/s3_archive/data_lake/download/edc",
dl_api), direct=FALSE, file = paste0(temp,".csv"))
output<-read.csv(paste0(temp,".csv"))
} else {
output<-atri_api(protocol,path=pub_api,direct=FALSE)
}
}
subjects<-atri_study_data(protocol="a345-test-1",data="subjects")
#Participant Attribute Value List
subject_attr<-atri_study_data(protocol="a345-test-1",data="subject_attr")
#Participant Attribute Datadic List
subject_attr_dd<-atri_study_data(protocol="a345-test-1",data="subject_attr_dd")
sites<-atri_study_data("a345-test-1","sites")
site_attr<-atri_study_data("a345-test-1","site_attr")
site_attr_dd<-atri_study_data("a345-test-1","site_attr_dd")
study_attr_dd<-atri_study_data("a345-test-1","study_attr_dd")
View(study_attr_dd)
data<-'subjects'
data<-ifelse(substr(data,1,1)=='/', sub("^.","",data),data)
data<-'/subjects'
data<-ifelse(substr(data,1,1)=='/', sub("^.","",data),data)
View(ATRItools::readAtri())
View(ATRItools::readAtri)
#' Read ATRI study data
#'
#' @param protocol The protocol name (e.g. 'a345-test-1').
#' @param data The study data source name. See below for examples for each data source. Additionally, allowable text entered can be the data export label (e.g.'Participant list'), the relative public api pathway (e.g. '/subjects'), or the data lake filename (e.g. 'participant_list.csv').
#' @param datalake default is TRUE, which returns data from the latest data extract from the data lake s3 archive topic.
#' With datalake=FALSE, returns the current data using the public API (/public/api/v1/<relative API path>).
#' @return A data.frame of the study data.
#'
#' @seealso \code{\link{atri_api}}
#' @examples
#' \donttest{
#' #--Participant data--#
#' #Participant list
#' subjects<-atri_study_data(protocol="a345-test-1",data="subjects")
#' #Participant Attribute Value list
#' subject_attr<-atri_study_data(protocol="a345-test-1",data="subject_attr")
#' #Participant Attribute Datadic list
#' subject_attr_dd<-atri_study_data(protocol="a345-test-1",data="subject_attr_dd")
#'
#' #--Site data--#
#' #Site list
#' sites<-atri_study_data("a345-test-1","sites")
#' #Site Attribute Value list
#' site_attr<-atri_study_data("a345-test-1","site_attr")
#' #Site Attribute Datadic list
#' site_attr_dd<-atri_study_data("a345-test-1","site_attr_dd")
#'
#' #--Study attribute data--#
#' #Study Attribute Datadic list
#' study_attr_dd<-atri_study_data("a345-test-1","study_attr_dd")
#'
#' #--CRF metadata--#
#' #eCRF list
#' crfs<-atri_study_data("a345-test-1","crfs")
#' #Monitor Review list
#' monitor_review<-atri_study_data("a345-test-1","monitor_review")
#' #Form Lock list
#' form_lock<-atri_study_data("a345-test-1","form_lock")
#'
#' #--Event/Schedule of events data--#
#' #Event list
#' events<-atri_study_data("a345-test-1","events")
#' #Event Attribute Datadic list
#' event_attr_dd<-atri_study_data("a345-test-1","event_attr_dd")
#' #Schedule of Events
#' soes<-atri_study_data("a345-test-1","soes")
#' #Subject Track list
#' subject_track<-atri_study_data("a345-test-1","subject_track")
#'
#' #--Alternate examples for 'data' parameter entry--#
#' #Data export label
#' subject_track.1<-atri_study_data("a345-test-1",data="Subject Track list")
#' #Relative API path
#' subject_track.2<-atri_study_data("a345-test-1",data="/subject/track/list")
#' #Data lake filename
#' subject_track.3<-atri_study_data("a345-test-1",data="subject_track_list.csv")
#' subject_track.4<-atri_study_data("a345-test-1",data="subject_track_list")
#'
#' #--Live data pull--#
#' subject_track_live<-atri_study_data("a345-test-1","subject_track", datalake=F)
#' }
#' @export
atri_study_data <- function(protocol, data, datalake=TRUE) {
d<-tolower(data)
d<-ifelse(substr(d,1,1)=='/', sub("^.","",d),d)
#Subject APIs
if (d %in% c("subjects","participant_list.csv","participant_list","participant list")){
dl_api<-"edc/study_data/latest/participant_list.csv"
pub_api<-"/subjects?output_format=csv"
} else if (d %in% c("subjects/attribute_values","subject_attribute_value_list.csv",
"subject_attribute_value_list","subject_attr","participant attribute value list")) {
dl_api<-"edc/study_data/latest/subject_attribute_value_list.csv"
pub_api<-"/subjects/attribute_values?output_format=csv"
} else if (d %in% c("/attribute_mng/subject/list","subject_attribute_datadic.csv",
"subject_attribute_datadic.csv","subject_attr_dd","participant attribute datadic list")) {
dl_api<-"edc/study_data/latest/subject_attribute_datadic.csv"
pub_api<-"/attribute_mng/subject/list?output_format=csv"
#Site APIs
} else if (d %in% c("sites","site_list.csv","site_list","site list")){
dl_api<-"edc/study_data/latest/site_list.csv"
pub_api<-"/sites?output_format=csv"
} else if (d %in% c("site/attribute_values","site_attribute_value_list.csv",
"site_attribute_value_list","site_attr","site attribute value list")) {
dl_api<-"edc/study_data/latest/site_attribute_value_list.csv"
pub_api<-"/site/attribute_values?output_format=csv"
} else if (d %in% c("/attribute_mng/site/list","site_attribute_datadic.csv",
"site_attribute_datadic","site_attr_dd","site atrribute datadic list")) {
dl_api<-"edc/study_data/latest/site_attribute_datadic.csv"
pub_api<-"/attribute_mng/site/list?output_format=csv"
#Study APIs
} else if (d %in% c("/attribute_mng/study/list","study_attribute_datadic.csv",
"study_attribute_datadic","study_attr_dd","study atrribute datadic list")) {
dl_api<-"edc/study_data/latest/study_attribute_datadic.csv"
pub_api<-"/attribute_mng/study/list?output_format=csv"
#CRF APIs
} else if (d %in% c("crfs","ecrf_list.csv","ecrf_list","ecrf list")){
dl_api<-"edc/study_data/latest/ecrf_list.csv"
pub_api<-"/crfs?output_format=csv"
} else if (d %in% c("monitor","monitor_review_list.csv",
"monitor_review_list","monitor_review","monitor review list")) {
dl_api<-"edc/crf_metadata/latest/monitor_review_list.csv"
pub_api<-"/monitor?output_format=csv"
} else if (d %in% c("lock","form_lock_list.csv",
"form_lock_list","form_lock","form lock list")) {
dl_api<-"edc/crf_metadata/latest/form_lock_list.csv"
pub_api<-"/lock?output_format=csv"
#Event APIs
} else if (d %in% c("events","event_list.csv","event_list","event list")){
dl_api<-"edc/study_data/latest/event_list.csv"
pub_api<-"/events?output_format=csv"
} else if (d %in% c("attribute_mng/event/list","event_attribute_datadic.csv",
"event_attribute_datadic","event_attr_dd","event atrribute datadic list")) {
dl_api<-"edc/study_data/latest/event_attribute_datadic.csv"
pub_api<-"/attribute_mng/event/list?output_format=csv"
} else if (d %in% c("tracks","schedule_of_events_list.csv",
"schedule_of_events_list","soes","schedule of events")){
dl_api<-"edc/study_data/latest/schedule_of_events_list.csv"
pub_api<-"/tracks?output_format=csv"
} else if (d %in% c("subject/track/list","subject_track_list.csv",
"subject_track_list","subject_track","subject track list")){
dl_api<-"edc/study_data/latest/subject_track_list.csv"
pub_api<-"/subject/track/list?output_format=csv"
} else {
d<-gsub('.csv','',d,fixed=T)
files.list<-atri_api(protocol,path=paste0('/docs/s3_archive/data_lake/items/edc/study_data/latest/?format=json&q=',utils::URLencode(d)))
files.list<-files.list[grepl(paste0(d,".csv"),files.list$label,fixed=T),]
if (nrow(files.list)==1 & datalake==T){#if datalake=T and pathway not hardcoded above, check if data parameter matches a datalake file
dl_api<-files.list$label
} else if (substr(data,1,1)=='/'&datalake==F){#if datalake=F and data starts with '/' then attempt to use the pathway
pub_api<-paste0(data,"?output_format=csv")
} else {
stop(paste0(data," pathway not set up. Check documentation or use atri_api function to obtain data source."))}
}
if (datalake) {
temp<-tempfile()
resp<-atri_api(protocol, path=paste0("/docs/s3_archive/data_lake/download/",
dl_api), direct=FALSE, file = paste0(temp,".csv"))
output<-read.csv(paste0(temp,".csv"))
} else {
output<-atri_api(protocol,path=pub_api,direct=FALSE)
}
return(output)
}
options(java.parameters = c("-XX:+UseConcMarkSweepGC", "-Xmx8192m")) #resolves java.lang.OutOfMemoryError: Java heap space errors
#-------------------------------------------------------------------------------
# Date Updated: 02/25/2021
# Author: Richard Gallardo
# Description: Replaces linebreaks in DM comments with double lines ||
#-------------------------------------------------------------------------------
rm(list=ls())
options(stringsAsFactors = FALSE)
require(ATRItools)
require(gdata)
require(WriteXLS)
require(Hmisc)
require(XLConnect)
today <- Sys.Date()
protocol <- 'nic'
queryresp <- atriedc_api(protocol = protocol, path = '/query/queries?output_format=csv')
dir <- paste('~/Box/Studies/nic (organic)/Data Management and Systems/Data Cleaning/', sep='')
dir.raw <- paste(dir, 'R Source Code/', protocol, ' Post Entry Checks/Post Entry Check Outputs/', sep='')
dir.pro <- paste(dir,'Post Entry Edit Checks/PEC Output/',sep='/')
QA <- as.data.frame(queryresp)
QA<-QA[order(QA$id,QA$user_create.id),]
QA<-QA[!duplicated(QA$id),]
colnames(QA)[colnames(QA) == 'id'] <- 'ID'
colnames(QA)[colnames(QA) == 'query_status.label'] <- 'STATUS'
fold.raw <- list.files(dir.raw)
fold.raw <- as.Date(fold.raw, '%Y-%m-%d')
fold.raw <- fold.raw[order(fold.raw, decreasing=T)]
dir.raw <- paste(dir.raw,fold.raw[1],sep='/')
fold.pro <- list.files(dir.pro)
fold.pro <- as.Date(fold.pro, '%Y-%m-%d')
fold.pro <- fold.pro[fold.pro != today]
fold.pro <- fold.pro[order(fold.pro, decreasing=T)]
dir.pro <- paste(dir.pro,fold.pro[1],sep='/')
list0 <- list.files(dir.raw, pattern='*.xlsx')
list1 <- list.files(dir.pro, pattern='*.xlsx')
list0o <- gsub('.xlsx','',list0)
list1o <- gsub('.xlsx','',list1)
listo <- intersect(list0o,list1o)
list0n <- paste(listo,'.xlsx',sep='')
list1n <- paste(listo,'.xlsx',sep='')
new.list <- list0o[list0o %nin% listo]
if (length(new.list) > 0) {
newfile <- paste(dir.raw, '/',new.list, '.xlsx', sep='')
dir.out <- paste(dir,'Post Entry Edit Checks/PEC Output/',today,sep='/')
if (!file.exists(dir.out)) dir.create(file.path(dir.out), showWarnings = F)
file.copy(newfile, dir.out)
}
details0 <- file.info(list.files(dir.raw, full.names = TRUE, pattern='*.xlsx'))
details0 <- details0[list0 %in% list0n,]
details1 <- file.info(list.files(dir.pro, full.names = TRUE, pattern='*.xlsx'))
details1 <- details1[list1 %in% list1n,]
rowcmt <- lapply(listo, function(x) {
dd0 <- readWorksheet(loadWorkbook(paste(dir.raw,'/',x,'.xlsx',sep='')), sheet = 1)
dd1 <- readWorksheet(loadWorkbook(paste(dir.pro,'/',x,'.xlsx',sep='')), sheet = 1)
#dd0 <- read.xlsx(paste(dir.raw,'/',x,'.xlsx',sep=''), sheet = 1)
#dd1 <- read.xlsx(paste(dir.pro,'/',x,'.xlsx',sep=''), sheet = 1)
if (nrow(dd1) < 1){
dd <- dd0
} else {
dd1$DM.Comments <- gsub("\\n", "||", dd1$DM.Comments)
dd_a <- merge(dd0[dd0$ID !='NA', 1:(ncol(dd0)-4)], dd1[,c('ID','QID','DM.Comments','No.Further.Review')], by=c('ID'), all.x=T)
dd_b <- subset(dd0, ID=='NA', select = -c(Query.Status))
dd <- rbind(dd_a, dd_b)
}
dd$QID <- ifelse(is.na(dd$QID), 'none', dd$QID)
dd <- merge(dd, QA[,c('ID','STATUS')], by.x='QID', by.y='ID', suffixes=c('','.QA'),all.x=T)
colnames(dd)[ncol(dd)] <- "Query.Status"
dd <- subset(dd, select=colnames(dd0))
dir.out <- paste(dir,'Post Entry Edit Checks/PEC Output/',today,sep='/')
if (!file.exists(dir.out)) dir.create(file.path(dir.out), showWarnings = F)
WriteXLS('dd', paste(dir.out,'/',x,'.xlsx',sep=''), row.names=FALSE, FreezeRow=1)
if (!is.null(dd$Flag)){
flag <- nrow(dd[dd$Flag %in% 'Review',])
flagNFR <- nrow(dd[dd$Flag %in% 'Review' & is.na(dd$No.Further.Review),])
not.flag <- nrow(dd[dd$Flag %in% 'No Review',])
unad.row  <- nrow(dd[dd$Flag %in% 'Review' & is.na(dd$DM.Comments),])
}else{
flag <- flagNFR <- not.flag <- unad.row <- NA
}
ad.row <- nrow(dd[!is.na(dd$DM.Comments),])
query.c <- nrow(dd[dd$Query.Status %in% 'C',])
query.r <- nrow(dd[dd$Query.Status %in% 'R',])
query.p <- nrow(dd[dd$Query.Status %in% 'P',])
query.c.d <- nrow(dd[dd$Query.Status %in% 'C' & !duplicated(dd$QID),])
query.r.d <- nrow(dd[dd$Query.Status %in% 'R' & !duplicated(dd$QID),])
query.p.d <- nrow(dd[dd$Query.Status %in% 'P' & !duplicated(dd$QID),])
c(flag, flagNFR, not.flag, unad.row, ad.row, query.c, query.r, query.p, query.c.d, query.r.d, query.p.d)
})
if (length(new.list) > 0) {
rowcmt.new <- lapply(new.list, function(x) {
dd <- readWorksheet(loadWorkbook(paste(dir.raw,'/',x,'.xlsx',sep='')), sheet = 1)
if (!is.null(dd$Flag)){
flag <- nrow(dd[dd$Flag %in% 'Review',])
flagNFR <- nrow(dd[dd$Flag %in% 'Review' & is.na(dd$No.Further.Review),])
not.flag <- nrow(dd[dd$Flag %in% 'No Review',])
unad.row  <- nrow(dd[dd$Flag %in% 'Review' & is.na(dd$DM.Comments),])
}else{
flag <- flagNFR <- not.flag <- unad.row <- NA
}
c(flag, flagNFR, not.flag, unad.row)
})
}
metrics <- do.call(rbind, rowcmt)
colnames(metrics) <- c('Records.Flagged.for.Review',
'Records.Flagged.Without.No.Further.Review',
'Records.NOT.Flagged.for.Review',
'Unaddressed.Rows',
'Addressed.Rows',
'Closed.Queries',
'Response.Given.Queries',
'Pending.Queries',
'Distinct.Count.of.Closed.Queries',
'Distinct.Count.of.Response.Given.Queries',
'Distinct.Count.of.Pending.Queries')
metrics <- data.frame(REPORT.NAME=listo, metrics)
if (length(new.list) > 0) {
metrics.new <- do.call(rbind, rowcmt.new)
colnames(metrics.new) <- c('Records.Flagged.for.Review',
'Records.Flagged.Without.No.Further.Review',
'Records.NOT.Flagged.for.Review',
'Unaddressed.Rows')
metrics.new <- data.frame(REPORT.NAME=new.list, metrics.new)
metrics <- plyr::rbind.fill(metrics,metrics.new)
}
WriteXLS('metrics', paste(dir, 'Post Entry Edit Checks/PEC Metrics/NIC_post_entry_checks_metrics_', today, '.xls', sep=''), row.names=FALSE,
verbose = FALSE, FreezeRow=1, BoldHeaderRow=TRUE, AdjWidth=TRUE, AutoFilter=TRUE)
setwd('/Users/rg08705/Desktop/ATRIDMtools')
roxygen2::roxygenise()
devtools
devtools::build()
devtools::install()
